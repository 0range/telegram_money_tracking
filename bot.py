import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import asyncio
import random
import string
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),  # –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª bot.log
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
GOOGLE_SHEETS_CREDS = 'creds.json'  # –ü—É—Ç—å –∫ JSON-–∫–ª—é—á—É

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_CREDS, scope)
client = gspread.authorize(creds)
spreadsheet = client.open_by_url(Config.SPREADSHEET_URL)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=Config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)  # –£–∫–∞–∑—ã–≤–∞–µ–º parse_mode –∑–¥–µ—Å—å
)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORIES = [
    "üçî –ï–¥–∞ –≤–Ω–µ –¥–æ–º–∞",
    "üõí –ü—Ä–æ–¥—É–∫—Ç—ã",
    "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "üëï –û–¥–µ–∂–¥–∞",
    "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
    "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è/–û–±—É—á–µ–Ω–∏–µ",
    "üèÉ‚Äç‚ôÄÔ∏è –ó–¥–æ—Ä–æ–≤—å–µ/–°–ø–æ—Ä—Ç",
    "üë∂ –î–µ—Ç–∏",
    "üëµ –†–æ–¥–∏—Ç–µ–ª–∏",
    "üéÅ –ü–æ–¥–∞—Ä–∫–∏",
    "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "üè† –ñ–∏–ª—å–µ",
    "üí≥ –ö—Ä–µ–¥–∏—Ç—ã",
    "üí∞ –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º",
    "üíµ –ê–ª–∏–º–µ–Ω—Ç—ã",
    "‚ö°Ô∏è –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã",
    "üíº –ü—Ä–æ—á–µ–µ"
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥")],
            [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")],
            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é"), KeyboardButton(text="–í—Å—Ç—É–ø–∏—Ç—å –≤ —Å–µ–º—å—é")]
        ],
        resize_keyboard=True  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    )
    return keyboard

# –õ–∏—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ–º–µ–π
def setup_families_list():
    try:
        return spreadsheet.worksheet("families_list")
    except gspread.WorksheetNotFound:
        worksheet = spreadsheet.add_worksheet(title="families_list", rows=100, cols=3)
        worksheet.append_row(["family_id", "user_id", "role"])
        return worksheet

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
def get_categories_keyboard():
    keyboard = []
    for i in range(0, len(CATEGORIES), 2):
        row = []
        row.append(InlineKeyboardButton(
            text=CATEGORIES[i], 
            callback_data=CATEGORIES[i]
        ))
        if i+1 < len(CATEGORIES):
            row.append(InlineKeyboardButton(
                text=CATEGORIES[i+1], 
                callback_data=CATEGORIES[i+1]
            ))
        keyboard.append(row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã (–Ω–∞—Ç–∏–≤–Ω–∞—è —á–∏—Å–ª–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
def get_amount_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        resize_keyboard=True,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"  # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    )
    return keyboard

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞—Ç—ã (–ª–∏—á–Ω–∞—è/—Å–µ–º–µ–π–Ω–∞—è)
def get_expense_type_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–õ–∏—á–Ω–∞—è", callback_data="personal")],
            [InlineKeyboardButton(text="–°–µ–º–µ–π–Ω–∞—è", callback_data="family")]
        ]
    )
    return keyboard

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats_type_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–õ–∏—á–Ω–∞—è", callback_data="personal_stats")],
            [InlineKeyboardButton(text="–°–µ–º–µ–π–Ω–∞—è", callback_data="family_stats")],
            [InlineKeyboardButton(text="–í—Å—è –º–æ—è", callback_data="all_stats")]
        ]
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
def escape_markdown(text):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
    escape_chars = r"\_*[]()~`>#+-=|{}.!"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)

def get_user_sheet(user_id):
    try:
        return spreadsheet.worksheet(str(user_id))
    except gspread.WorksheetNotFound:
        worksheet = spreadsheet.add_worksheet(title=str(user_id), rows=100, cols=10)
        worksheet.append_row(["–î–∞—Ç–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞", "–¢–µ–≥–∏", "–¢–∏–ø"])
        return worksheet

def get_family_sheet(family_id):
    try:
        return spreadsheet.worksheet(family_id)
    except gspread.WorksheetNotFound:
        return None

def generate_family_id():
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–µ–º—å–∏ (6 —Å–∏–º–≤–æ–ª–æ–≤)
    chars = string.ascii_letters + string.digits
    return 'family-' + ''.join(random.choice(chars) for _ in range(6))

@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_id = message.from_user.id
    get_user_sheet(user_id)  # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ü§ë\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

@dp.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é")
async def create_family(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
    families_list = setup_families_list()
    records = families_list.get_all_records()
    if any(str(user_id) == record.get("user_id") for record in records):
        await message.reply("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–º—å–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–µ–º—å–∏
    family_id = generate_family_id()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è —Å–µ–º—å–∏
    try:
        family_sheet = spreadsheet.add_worksheet(title=f"family-{family_id}", rows=100, cols=10)
        family_sheet.append_row(["–î–∞—Ç–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞", "–¢–µ–≥–∏", "–¢–∏–ø", "user_id"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–µ–º—å–∏ –≤ families_list
        families_list.append_row([family_id, str(user_id), "creator"])
        logger.info(f"–°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞: {family_id}, —Å–æ–∑–¥–∞—Ç–µ–ª—å: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await message.reply(f"–°–µ–º—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üéâ\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–π —Å–µ–º—å–∏: `{family_id}`\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.")

@dp.message(lambda message: message.text == "–í—Å—Ç—É–ø–∏—Ç—å –≤ —Å–µ–º—å—é")
async def join_family(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
    for sheet in spreadsheet.worksheets():
        if sheet.title.startswith('family-'):
            records = sheet.get_all_records()
            if any(record.get("user_id") == str(user_id) for record in records):
                await message.reply("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.")
                return

    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ–º—å–∏:")

@dp.message(lambda message: message.text.startswith('family-'))
async def handle_family_id(message: Message):
    user_id = message.from_user.id
    family_id = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è —Å–µ–º—å—è
    families_list = setup_families_list()
    records = families_list.get_all_records()
    if not any(family_id == record.get("family_id") for record in records):
        await message.reply("–°–µ–º—å—è —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
    if any(str(user_id) == record.get("user_id") for record in records):
        await message.reply("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é
    try:
        families_list.append_row([family_id, str(user_id), "member"])
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—Å—Ç—É–ø–∏–ª –≤ —Å–µ–º—å—é {family_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —Å–µ–º—å—é: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —Å–µ–º—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–µ–º—å—é! üéâ")

@dp.message(lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def start_add_expense(message: Message):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_categories_keyboard()
    )

@dp.callback_query(lambda query: query.data in CATEGORIES)
async def handle_category(query: CallbackQuery):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ª–æ–≤–∞—Ä–µ user_data
    user_id = query.from_user.id
    category = query.data
    user_data[user_id] = {"category": category}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—É–º–º—ã –∏ –≤–∫–ª—é—á–∞–µ–º —á–∏—Å–ª–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=get_amount_keyboard(),
        parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
    )

    # –õ–æ–≥–∏
    print(user_data)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    await query.answer()

@dp.message(lambda message: message.text.replace('.', '').isdigit())
async def handle_amount(message: Message):
    user_id = message.from_user.id
    amount = float(message.text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]["amount"] = amount
    
    # –õ–æ–≥–∏
    print(user_data)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —Ç—Ä–∞—Ç—ã
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞—Ç—ã:",
        reply_markup=get_expense_type_keyboard()
    )

@dp.callback_query(lambda query: query.data in ["personal", "family"])
async def handle_expense_type(query: CallbackQuery):
    user_id = query.from_user.id
    expense_type = query.data
    amount = user_data.get(user_id, {}).get("amount", 0)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category = user_data.get(user_id, {}).get("category", "üíº –ü—Ä–æ—á–µ–µ")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        if expense_type == "personal":
            # –õ–∏—á–Ω–∞—è —Ç—Ä–∞—Ç–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–∏—á–Ω—ã–π –ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sheet = get_user_sheet(user_id)
            row = [
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                category,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                amount,
                "",  # –¢–µ–≥–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
                "–õ–∏—á–Ω–∞—è"  # –¢–∏–ø —Ç—Ä–∞—Ç—ã
            ]
            sheet.append_row(row)
            logger.info(f"–õ–∏—á–Ω–∞—è —Ç—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category}, —Å—É–º–º–∞ {amount}")
            await query.message.answer(
                f"‚úÖ –õ–∏—á–Ω–∞—è —Ç—Ä–∞—Ç–∞: {category} - {amount} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=get_main_menu(),
                parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
            )
        
        elif expense_type == "family":
            # –°–µ–º–µ–π–Ω–∞—è —Ç—Ä–∞—Ç–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–∏—Å—Ç —Å–µ–º—å–∏
            families_list = setup_families_list()
            records = families_list.get_all_records()
            family_id = None
            
            # –ò—â–µ–º family_id, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            for record in records:
                if str(user_id) == str(record.get("user_id")):
                    family_id = record.get("family_id")
                    break
            
            if family_id:
                # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç —Å–µ–º—å–∏
                family_sheet = get_family_sheet(f"family-{family_id}")
                if family_sheet:
                    row = [
                        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        category,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                        amount,
                        "",  # –¢–µ–≥–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
                        str(user_id),  # user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω–µ—Å —Ç—Ä–∞—Ç—É
                        "–°–µ–º–µ–π–Ω–∞—è"  # –¢–∏–ø —Ç—Ä–∞—Ç—ã
                    ]
                    family_sheet.append_row(row)
                    logger.info(f"–°–µ–º–µ–π–Ω–∞—è —Ç—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category}, —Å—É–º–º–∞ {amount}")
                    await query.message.answer(
                        f"‚úÖ –°–µ–º–µ–π–Ω–∞—è —Ç—Ä–∞—Ç–∞: {category} - {amount} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                        reply_markup=get_main_menu(),
                        parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
                    )
                else:
                    logger.error(f"–õ–∏—Å—Ç —Å–µ–º—å–∏ {family_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await query.message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=get_main_menu(),
                        parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
                    )
            else:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–µ–º—å–µ, –Ω–æ –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–º–µ–π–Ω—É—é —Ç—Ä–∞—Ç—É")
                await query.message.answer(
                    "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–º–µ–π–Ω—É—é —Ç—Ä–∞—Ç—É.",
                    reply_markup=get_main_menu(),
                    parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
                )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data.pop(user_id, None)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞—Ç—ã: {e}")
        await query.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu(),
            parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
        )
    
    await query.answer()

@dp.message(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def show_stats_menu(message: Message):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_stats_type_keyboard()
    )

@dp.callback_query(lambda query: query.data in ["personal_stats", "family_stats", "all_stats"])
async def handle_stats_type(query: CallbackQuery):
    user_id = query.from_user.id
    stats_type = query.data
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_month = datetime.now().strftime("%Y-%m")
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = {}
    total = 0
    
    try:
        if stats_type == "personal_stats":
            # –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sheet = get_user_sheet(user_id)
            records = sheet.get_all_records()
            monthly_expenses = [record for record in records if record["–î–∞—Ç–∞"].startswith(current_month) and record.get("–¢–∏–ø") == "–õ–∏—á–Ω–∞—è"]
            
            for record in monthly_expenses:
                category = record["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
                amount = float(record["–°—É–º–º–∞"])
                stats[category] = stats.get(category, 0) + amount
                total += amount
        
        elif stats_type == "family_stats":
            # –°–µ–º–µ–π–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ —Ç—Ä–∞—Ç—ã —Å–µ–º—å–∏
            families_list = setup_families_list()
            records = families_list.get_all_records()
            family_id = None
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ families_list –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ó–∞–ø–∏—Å–∏ –≤ families_list: {records}")
            
            # –ò—â–µ–º family_id, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            for record in records:
                if str(user_id) == str(record.get("user_id")):
                    family_id = record.get("family_id")
                    break
            
            if family_id:
                # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç —Å–µ–º—å–∏
                family_sheet = get_family_sheet(f"family-{family_id}")
                if family_sheet:
                    records = family_sheet.get_all_records()
                    monthly_expenses = [record for record in records if record["–î–∞—Ç–∞"].startswith(current_month)]
                    
                    for record in monthly_expenses:
                        category = record["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
                        amount = float(record["–°—É–º–º–∞"])
                        stats[category] = stats.get(category, 0) + amount
                        total += amount
                else:
                    logger.error(f"–õ–∏—Å—Ç —Å–µ–º—å–∏ {family_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
                    return
            else:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–µ–º—å–µ, –Ω–æ –∑–∞–ø—Ä–æ—Å–∏–ª —Å–µ–º–µ–π–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                await query.message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–µ–º–µ–π–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.", reply_markup=get_main_menu())
                return
        
        elif stats_type == "all_stats":
            # –í—Å—è –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ª–∏—á–Ω—ã–µ + –æ–±—â–∏–µ —Ç—Ä–∞—Ç—ã
            # –õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã
            sheet = get_user_sheet(user_id)
            records = sheet.get_all_records()
            monthly_expenses = [record for record in records if record["–î–∞—Ç–∞"].startswith(current_month) and record.get("–¢–∏–ø") == "–õ–∏—á–Ω–∞—è"]
            
            for record in monthly_expenses:
                category = record["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
                amount = float(record["–°—É–º–º–∞"])
                stats[category] = stats.get(category, 0) + amount
                total += amount
            
            # –û–±—â–∏–µ —Ç—Ä–∞—Ç—ã
            families_list = setup_families_list()
            records = families_list.get_all_records()
            family_id = None
            
            # –ò—â–µ–º family_id, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            for record in records:
                if str(user_id) == str(record.get("user_id")):
                    family_id = record.get("family_id")
                    break
            
            if family_id:
                # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç —Å–µ–º—å–∏
                family_sheet = get_family_sheet(f"family-{family_id}")
                if family_sheet:
                    records = family_sheet.get_all_records()
                    monthly_expenses = [record for record in records if record["–î–∞—Ç–∞"].startswith(current_month)]
                    
                    for record in monthly_expenses:
                        category = record["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
                        amount = float(record["–°—É–º–º–∞"])
                        stats[category] = stats.get(category, 0) + amount
                        total += amount
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        if stats:
            stats_message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({stats_type}) –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({current_month}):\n"
            for category, sum_amount in stats.items():
                stats_message += f"{category}: {sum_amount:.2f} —Ä—É–±.\n"
            stats_message += f"\nüíµ –û–±—â–∞—è —Å—É–º–º–∞: {total:.2f} —Ä—É–±."
        else:
            stats_message = f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ({stats_type}) –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({current_month})."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
        await query.message.answer(stats_message, reply_markup=get_main_menu(), parse_mode=None)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
    
    await query.answer()

@dp.message()
async def handle_unknown(message: Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_menu())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_daily_reminder(bot: Bot):
    while True:
        now = datetime.now()
        target_time = now.replace(hour=21, minute=0, second=0, microsecond=0)  # 21:00 –ú–°–ö
        if now > target_time:
            target_time += timedelta(days=1)  # –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        time_to_wait = (target_time - now).total_seconds()
        await asyncio.sleep(time_to_wait)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–∞—Ç—ã
        for worksheet in spreadsheet.worksheets():
            if worksheet.title.startswith('family-'):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—Å—Ç—ã —Å–µ–º—å–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ç—Ä–∞—Ç
                continue
            
            user_id = worksheet.title
            records = worksheet.get_all_records()
            today = datetime.now().strftime("%Y-%m-%d")
            today_expenses = [record for record in records if record["–î–∞—Ç–∞"].startswith(today)]

            if not today_expenses:
                try:
                    await bot.send_message(
                        chat_id=int(user_id),
                        text="–ù–µ—É–∂–µ–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏? –î–∞–≤–∞–π—Ç–µ –≤—Å–ø–æ–º–Ω–∏–º –∏ –∑–∞–ø–∏—à–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                        reply_markup=get_categories_keyboard()
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_weekly_reminder(bot: Bot):
    while True:
        now = datetime.now()
        target_time = now.replace(hour=11, minute=0, second=0, microsecond=0)  # 11:00 –ú–°–ö
        if now > target_time:
            target_time += timedelta(days=(7 - now.weekday()))  # –°–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        time_to_wait = (target_time - now).total_seconds()
        await asyncio.sleep(time_to_wait)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        for worksheet in spreadsheet.worksheets():
            if worksheet.title.startswith('family-'):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—Å—Ç—ã —Å–µ–º—å–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ç—Ä–∞—Ç
                continue
            
            user_id = worksheet.title
            try:
                await bot.send_message(
                    chat_id=int(user_id),
                    text="–í—Å–µ —Ç—Ä–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é –∑–∞–ø–∏—Å–∞–Ω—ã? –í—Ä–µ–º—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!",
                    reply_markup=get_main_menu()
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def scheduler(bot: Bot):
    asyncio.create_task(send_daily_reminder(bot))
    asyncio.create_task(send_weekly_reminder(bot))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await scheduler(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
