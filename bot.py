import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import asyncio
import random
import string
from config import Config
from typing import Union
import uuid
import pytz
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),  # –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª bot.log
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
GOOGLE_SHEETS_CREDS = 'creds.json'  # –ü—É—Ç—å –∫ JSON-–∫–ª—é—á—É

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_CREDS, scope)
client = gspread.authorize(creds)
spreadsheet = client.open_by_url(Config.SPREADSHEET_URL)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=Config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)  # –£–∫–∞–∑—ã–≤–∞–µ–º parse_mode –∑–¥–µ—Å—å
)
dp = Dispatcher(storage=MemoryStorage())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORIES = [
    "üçî –ï–¥–∞ –≤–Ω–µ –¥–æ–º–∞",
    "üõí –ü—Ä–æ–¥—É–∫—Ç—ã",
    "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "üëï –û–¥–µ–∂–¥–∞",
    "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
    "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è/–û–±—É—á–µ–Ω–∏–µ",
    "üèÉ‚Äç‚ôÄÔ∏è –ó–¥–æ—Ä–æ–≤—å–µ/–°–ø–æ—Ä—Ç",
    "üë∂ –î–µ—Ç–∏",
    "üëµ –†–æ–¥–∏—Ç–µ–ª–∏",
    "üéÅ –ü–æ–¥–∞—Ä–∫–∏",
    "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "üè† –ñ–∏–ª—å–µ",
    "üí≥ –ö—Ä–µ–¥–∏—Ç—ã",
    "üí∞ –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º",
    "üíµ –ê–ª–∏–º–µ–Ω—Ç—ã",
    "‚ö°Ô∏è –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã",
    "üíº –ü—Ä–æ—á–µ–µ"
]

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class EditExpense(StatesGroup):
    SELECT_FIELD = State()
    ENTER_NEW_VALUE = State()

# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
class StatsPeriod(StatesGroup):
    WAITING_PERIOD = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥")],
            [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")],
            [KeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é"), KeyboardButton(text="–í—Å—Ç—É–ø–∏—Ç—å –≤ —Å–µ–º—å—é")]
        ],
        resize_keyboard=True  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    )
    return keyboard

# –õ–∏—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ–º–µ–π
def setup_families_list():
    try:
        return spreadsheet.worksheet("families_list")
    except gspread.WorksheetNotFound:
        worksheet = spreadsheet.add_worksheet(title="families_list", rows=100, cols=3)
        worksheet.append_row(["family_id", "user_id", "role"])
        return worksheet

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
def get_categories_keyboard():
    keyboard = []
    for i in range(0, len(CATEGORIES), 2):
        row = []
        row.append(InlineKeyboardButton(
            text=CATEGORIES[i], 
            callback_data=CATEGORIES[i]
        ))
        if i+1 < len(CATEGORIES):
            row.append(InlineKeyboardButton(
                text=CATEGORIES[i+1], 
                callback_data=CATEGORIES[i+1]
            ))
        keyboard.append(row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã (–Ω–∞—Ç–∏–≤–Ω–∞—è —á–∏—Å–ª–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
def get_amount_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        resize_keyboard=True,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"  # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    )
    return keyboard

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞—Ç—ã (–ª–∏—á–Ω–∞—è/—Å–µ–º–µ–π–Ω–∞—è)
def get_expense_type_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–õ–∏—á–Ω–∞—è", callback_data="personal")],
            [InlineKeyboardButton(text="–°–µ–º–µ–π–Ω–∞—è", callback_data="family")]
        ]
    )
    return keyboard

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stats_type_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_personal")],
            [InlineKeyboardButton(text="–°–µ–º–µ–π–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_family")],
            [InlineKeyboardButton(text="–í—Å—è", callback_data="stats_all")]
        ]
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
def get_period_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="week")],
            [InlineKeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü", callback_data="month")]
        ]
    )

# –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ -- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
def get_skip_comment_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]
        ]
    )

# –î–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä -- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ç—ã
def get_expense_actions_keyboard(expense_id: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{expense_id}")#,
                #InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{expense_id}")
            ]
        ]
    )

def get_edit_fields_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="category")],
            [InlineKeyboardButton(text="–°—É–º–º–∞", callback_data="amount")],
            [InlineKeyboardButton(text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="comment")]
        ]
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
def escape_markdown(text):
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
    escape_chars = r"\_*[]()~`>#+-=|{}.!"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)

def get_user_sheet(user_id):
    try:
        sheet = spreadsheet.worksheet(str(user_id))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ ID
        if sheet.row_values(1)[0] != "ID":
            sheet.insert_cols([{"values": ["ID"]}], 1)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É ID –≤ –Ω–∞—á–∞–ª–æ
        return sheet
    except gspread.WorksheetNotFound:
        sheet = spreadsheet.add_worksheet(title=str(user_id), rows=100, cols=11)
        sheet.append_row(["ID", "–î–∞—Ç–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞", "–¢–µ–≥–∏", "–¢–∏–ø", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
        return sheet

def get_family_sheet(family_id):
    try:
        sheet = spreadsheet.worksheet(family_id)
        if sheet.row_values(1)[0] != "ID":
            sheet.insert_cols([{"values": ["ID"]}], 1)
        return sheet
    except gspread.WorksheetNotFound:
        return None

def generate_family_id():
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–µ–º—å–∏ (6 —Å–∏–º–≤–æ–ª–æ–≤)
    chars = string.ascii_letters + string.digits
    return 'family-' + ''.join(random.choice(chars) for _ in range(6))

@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_id = message.from_user.id
    get_user_sheet(user_id)  # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ü§ë\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

@dp.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é")
async def create_family(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
    families_list = setup_families_list()
    records = families_list.get_all_records()
    if any(str(user_id) == record.get("user_id") for record in records):
        await message.reply("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–º—å–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–µ–º—å–∏
    family_id = generate_family_id()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è —Å–µ–º—å–∏
    try:
        family_sheet = spreadsheet.add_worksheet(title=f"family-{family_id}", rows=100, cols=10)
        family_sheet.append_row(["–î–∞—Ç–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞", "–¢–µ–≥–∏", "–¢–∏–ø", "user_id"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–µ–º—å–∏ –≤ families_list
        families_list.append_row([family_id, str(user_id), "creator"])
        logger.info(f"–°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞: {family_id}, —Å–æ–∑–¥–∞—Ç–µ–ª—å: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–º—å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await message.reply(f"–°–µ–º—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üéâ\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–π —Å–µ–º—å–∏: `{family_id}`\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.")

@dp.message(lambda message: message.text == "–í—Å—Ç—É–ø–∏—Ç—å –≤ —Å–µ–º—å—é")
async def join_family(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
    for sheet in spreadsheet.worksheets():
        if sheet.title.startswith('family-'):
            records = sheet.get_all_records()
            if any(record.get("user_id") == str(user_id) for record in records):
                await message.reply("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.")
                return

    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ–º—å–∏:")

@dp.message(lambda message: message.text.startswith('family-'))
async def handle_family_id(message: Message):
    user_id = message.from_user.id
    family_id = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è —Å–µ–º—å—è
    families_list = setup_families_list()
    records = families_list.get_all_records()
    if not any(family_id == record.get("family_id") for record in records):
        await message.reply("–°–µ–º—å—è —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ–º—å–µ
    if any(str(user_id) == record.get("user_id") for record in records):
        await message.reply("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–º—å—é
    try:
        families_list.append_row([family_id, str(user_id), "member"])
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—Å—Ç—É–ø–∏–ª –≤ —Å–µ–º—å—é {family_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —Å–µ–º—å—é: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —Å–µ–º—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–µ–º—å—é! üéâ")

@dp.message(lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def start_add_expense(message: Message):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_categories_keyboard()
    )

@dp.callback_query(lambda query: query.data in CATEGORIES)
async def handle_category(query: CallbackQuery):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ª–æ–≤–∞—Ä–µ user_data
    user_id = query.from_user.id
    category = query.data
    user_data[user_id] = {"category": category}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—É–º–º—ã –∏ –≤–∫–ª—é—á–∞–µ–º —á–∏—Å–ª–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=get_amount_keyboard(),
        parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
    )

    # –õ–æ–≥–∏
    #print(user_data)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    await query.answer()

@dp.message(lambda message: message.text.replace('.', '').isdigit())
async def handle_amount(message: Message):
    user_id = message.from_user.id
    amount = float(message.text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]["amount"] = amount
    
    # –õ–æ–≥–∏
    #print(user_data)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —Ç—Ä–∞—Ç—ã
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞—Ç—ã:",
        reply_markup=get_expense_type_keyboard()
    )

@dp.callback_query(lambda query: query.data in ["personal", "family"])
async def handle_expense_type(query: CallbackQuery):
    user_id = query.from_user.id
    expense_type = query.data
    user_data[user_id] = {
        "category": user_data.get(user_id, {}).get("category"),
        "amount": user_data.get(user_id, {}).get("amount"),
        "expense_type": expense_type,
        "awaiting_comment": True  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    }
    
    await query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–∞—Ç–µ:",
        reply_markup=get_skip_comment_keyboard()  # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    )
    await query.answer()

@dp.callback_query(lambda query: query.data == "skip_comment")
async def handle_skip_comment(query: CallbackQuery):
    user_id = query.from_user.id
    user_data[user_id]["comment"] = ""  # –ü—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await process_expense(user_id, query.message)
    await query.answer()

@dp.message(lambda message: user_data.get(message.from_user.id, {}).get("awaiting_comment"))
async def handle_comment(message: Message):
    user_id = message.from_user.id
    user_data[user_id]["comment"] = message.text.strip()
    await process_expense(user_id, message)

async def process_expense(user_id: int, message: Union[Message, CallbackQuery]):
    data = user_data.get(user_id, {})
    comment = data.get("comment", "")
    expense_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID
    
    try:
        if data["expense_type"] == "personal":
            sheet = get_user_sheet(user_id)
            row = [
                expense_id,
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                data["category"],
                data["amount"],
                "",  # –¢–µ–≥–∏
                "–õ–∏—á–Ω–∞—è",
                comment  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            ]
            sheet.append_row(row)
            
        elif data["expense_type"] == "family":
            families_list = setup_families_list()
            family_id = next(
                (r["family_id"] for r in families_list.get_all_records() 
                if str(user_id) == str(r["user_id"])), None
            )
            
            if family_id:
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å–µ–º—å—è: {family_id}")  # <--- –õ–æ–≥–∏—Ä—É–µ–º family_id
                family_sheet = get_family_sheet(f"family-{family_id}")
                if family_sheet:
                    logger.info(f"–õ–∏—Å—Ç —Å–µ–º—å–∏ –Ω–∞–π–¥–µ–Ω: {family_sheet.title}") 
                    row = [
                        expense_id,
                        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        data["category"],
                        data["amount"],
                        "",  # –¢–µ–≥–∏
                        "–°–µ–º–µ–π–Ω–∞—è",
                        str(user_id),
                        comment  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    ]
                    family_sheet.append_row(row)
                else:
                    logger.error("–õ–∏—Å—Ç —Å–µ–º—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")  # <--- –û—à–∏–±–∫–∞
            else:
                logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–µ–º—å–µ!")  # <--- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        del user_data[user_id]
        #print(data)
        category_p = data["category"]
        amount_p = data["amount"]
        expense_type_p = data["expense_type"]
        await message.answer(
            f"‚úÖ –¢—Ä–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_p} –°—É–º–º–∞: {amount_p} –¢–∏–ø: {expense_type_p} –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '–Ω–µ—Ç'}",
            reply_markup=get_main_menu()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=get_main_menu())

@dp.message(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def show_stats_menu(message: Message):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_stats_type_keyboard()
    )

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def calculate_stats(user_id: int, stats_type: str, start_date: datetime.date, end_date: datetime.date):
    stats = defaultdict(float)
    
    # –õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã
    if stats_type in ["stats_personal", "stats_all"]:
        personal_sheet = get_user_sheet(user_id)
        records = personal_sheet.get_all_records()
        for record in records:
            record_date = datetime.strptime(record["–î–∞—Ç–∞"], "%Y-%m-%d %H:%M:%S").date()
            if start_date <= record_date <= end_date:
                stats[record["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]] += float(record["–°—É–º–º–∞"])
    
    # –°–µ–º–µ–π–Ω—ã–µ —Ç—Ä–∞—Ç—ã
    if stats_type in ["stats_family", "stats_all"]:
        families_list = setup_families_list()
        for family in filter(lambda r: str(user_id) == str(r["user_id"]), families_list.get_all_records()):
            family_sheet = get_family_sheet(f"family-{family['family_id']}")
            if family_sheet:
                records = family_sheet.get_all_records()
                for record in records:
                    record_date = datetime.strptime(record["–î–∞—Ç–∞"], "%Y-%m-%d %H:%M:%S").date()
                    if start_date <= record_date <= end_date:
                        stats[record["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]] += float(record["–°—É–º–º–∞"])
    
    return stats

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query(lambda query: query.data in ["stats_personal", "stats_family", "stats_all"])
async def handle_stats_type(query: CallbackQuery, state: FSMContext):
    await state.update_data(stats_type=query.data)
    await query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_period_keyboard()
    )
    await state.set_state(StatsPeriod.WAITING_PERIOD)
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
@dp.callback_query(StatsPeriod.WAITING_PERIOD, lambda query: query.data in ["week", "month"])
async def handle_stats_period(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    data = await state.get_data()
    stats_type = data["stats_type"]
    period = query.data

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
        today = datetime.now(pytz.timezone('Europe/Moscow')).date()
        
        if period == "week":
            start_date = today - timedelta(days=today.weekday())
            end_date = start_date + timedelta(days=6)
            period_title = f"–Ω–µ–¥–µ–ª—é ({start_date:%d.%m} - {end_date:%d.%m})"
        else:
            start_date = today.replace(day=1)
            end_date = (start_date + timedelta(days=32)).replace(day=1) - timedelta(days=1)
            period_title = f"–º–µ—Å—è—Ü ({start_date:%m.%Y})"

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        #print(user_id,stats_type,start_date,end_date)
        stats = await calculate_stats(
            user_id=user_id,
            stats_type=stats_type,
            start_date=start_date,
            end_date=end_date
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_title}*\n\n"
        for category, amount in stats.items():
            message += f"{category}: {amount:.2f} —Ä—É–±.\n"
        message += f"\nüíµ *–ò—Ç–æ–≥–æ:* {sum(stats.values()):.2f} —Ä—É–±."

        await query.message.answer(message, parse_mode="Markdown")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")

    await state.clear()
    await query.answer()

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞—Ç
async def get_last_expenses(user_id: int, limit: int = 5):
    expenses = []
    seen_ids = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID

    # –õ–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã
    personal_sheet = get_user_sheet(user_id)
    personal_records = personal_sheet.get_all_records()
    for record in personal_records:
        if record["ID"] not in seen_ids:
            seen_ids.add(record["ID"])
            expenses.append({
                "id": record["ID"],
                "type": "personal",
                "data": record
            })

    # –°–µ–º–µ–π–Ω—ã–µ —Ç—Ä–∞—Ç—ã
    families_list = setup_families_list()
    user_families = {r["family_id"] for r in families_list.get_all_records() if str(r["user_id"]) == str(user_id)}
    
    for family_id in user_families:
        family_sheet = get_family_sheet(f"family-{family_id}")
        if family_sheet:
            family_records = family_sheet.get_all_records()
            for record in family_records:
                if record["ID"] not in seen_ids:
                    seen_ids.add(record["ID"])
                    expenses.append({
                        "id": record["ID"],
                        "type": "family",
                        "data": record
                    })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
    expenses.sort(
        key=lambda x: datetime.strptime(x["data"]["–î–∞—Ç–∞"], "%Y-%m-%d %H:%M:%S"),
        reverse=True
    )
    return expenses[:limit]

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞—Ç
@dp.message(lambda message: message.text == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã")
async def show_last_expenses(message: Message):
    user_id = message.from_user.id
    expenses = await get_last_expenses(user_id)
    
    if not expenses:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç.")
        return
    
    for expense in expenses:
        emoji = "üë§" if expense["type"] == "personal" else "üë®üë©üëßüë¶"
        text = (
            f"{emoji} *{'–õ–∏—á–Ω–∞—è' if expense['type'] == 'personal' else '–°–µ–º–µ–π–Ω–∞—è'} —Ç—Ä–∞—Ç–∞*\n"
            f"üóì {expense['data']['–î–∞—Ç–∞']}\n"
            f"üè∑ {expense['data']['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}\n"
            f"üíµ {expense['data']['–°—É–º–º–∞']} —Ä—É–±.\n"
            f"üìù {expense['data'].get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}"
        )
        
        callback_data = f"delete_{expense['id']}"
        
        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å", 
                    callback_data=callback_data
                )]]
            ),
            parse_mode="Markdown"
        )

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(lambda query: query.data.startswith("delete_"))
async def handle_delete_expense(query: CallbackQuery):
    try:
        expense_id = query.data.split("_")[1]
        
        # –ò—â–µ–º —Ç—Ä–∞—Ç—É –≤–æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã
        personal_sheet = get_user_sheet(user_id)
        cell = personal_sheet.find(expense_id)
        if cell:
            personal_sheet.delete_rows(cell.row)
            await query.message.edit_text("‚úÖ –õ–∏—á–Ω–∞—è —Ç—Ä–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!")
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–µ–π–Ω—ã–µ —Ç—Ä–∞—Ç—ã
        families_list = setup_families_list()
        user_families = [
            r["family_id"] for r in families_list.get_all_records() 
            if str(r["user_id"]) == str(user_id)
        ]
        
        for family_id in user_families:
            family_sheet = get_family_sheet(f"family-{family_id}")
            if not family_sheet:
                continue
            cell = family_sheet.find(expense_id)
            if cell:
                family_sheet.delete_rows(cell.row)
                await query.message.edit_text("‚úÖ –°–µ–º–µ–π–Ω–∞—è —Ç—Ä–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!")
                return
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        await query.answer("‚ùå –¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(lambda query: query.data.startswith("edit_"), EditExpense.SELECT_FIELD)
async def handle_edit_expense(query: CallbackQuery, state: FSMContext):
    expense_id = query.data.split("_")[1]
    await state.update_data(expense_id=expense_id)
    
    await query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_fields_keyboard()
    )
    await state.set_state(EditExpense.SELECT_FIELD)
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
@dp.callback_query(EditExpense.SELECT_FIELD)
async def handle_select_field(query: CallbackQuery, state: FSMContext):
    field = query.data
    await state.update_data(field=field)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    await state.set_state(EditExpense.ENTER_NEW_VALUE)
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@dp.message(EditExpense.ENTER_NEW_VALUE)
async def handle_new_value(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    
    try:
        sheet = get_user_sheet(user_id)
        row = int(data['expense_id'])
        col = {
            "category": 2,  # B —Å—Ç–æ–ª–±–µ—Ü
            "amount": 3,    # C —Å—Ç–æ–ª–±–µ—Ü
            "comment": 6     # F —Å—Ç–æ–ª–±–µ—Ü
        }[data['field']]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É
        sheet.update_cell(row, col, message.text)
        await message.answer("‚úÖ –¢—Ä–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞—Ç—É")
    
    await state.clear()

@dp.message()
async def handle_unknown(message: Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_menu())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_daily_reminder(bot: Bot):
    msk = pytz.timezone('Europe/Moscow')  # –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    
    while True:
        now = datetime.now(msk)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–°–ö
        target_time = now.replace(hour=21, minute=0, second=0, microsecond=0, tzinfo=msk)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–∑–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if now > target_time:
            target_time += timedelta(days=1)
        
        # –ñ–¥–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        wait_seconds = (target_time - now).total_seconds()
        await asyncio.sleep(wait_seconds)
        
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ –ú–°–ö
        today = now.strftime("%Y-%m-%d")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
        for worksheet in spreadsheet.worksheets():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–º–µ–π–Ω—ã–µ –∏ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –ª–∏—Å—Ç—ã
            if worksheet.title.startswith('family-') or not worksheet.title.isdigit():
                continue
            
            try:
                user_id = int(worksheet.title)
                records = worksheet.get_all_records()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ª–∏—Å—Ç—ã –∏–ª–∏ –±–µ–∑ –∫–æ–ª–æ–Ω–∫–∏ "–î–∞—Ç–∞"
                if not records or "–î–∞—Ç–∞" not in records[0]:
                    continue
                
                # –ò—â–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç—Ä–∞—Ç—ã
                today_expenses = [
                    record for record in records 
                    if record.get("–î–∞—Ç–∞", "").startswith(today)
                ]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç—Ä–∞—Ç –Ω–µ—Ç
                if not today_expenses:
                    await bot.send_message(
                        chat_id=user_id,
                        text="–ù–µ—É–∂–µ–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏? –î–∞–≤–∞–π—Ç–µ –≤—Å–ø–æ–º–Ω–∏–º –∏ –∑–∞–ø–∏—à–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                        reply_markup=get_categories_keyboard()
                    )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {worksheet.title}: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_weekly_reminder(bot: Bot):
    msk = pytz.timezone('Europe/Moscow')  # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã
    
    while True:
        now = datetime.now(msk)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–°–ö
        target_time = now.replace(hour=11, minute=0, second=0, microsecond=0, tzinfo=msk)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
        days_until_sunday = (6 - now.weekday()) % 7  # 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ Python
        
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ:
        if days_until_sunday == 0 and now > target_time:
            days_until_sunday = 7  # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        
        target_time += timedelta(days=days_until_sunday)
        
        # –ï—Å–ª–∏ target_time –≤—Å—ë —Ä–∞–≤–Ω–æ –≤ –ø—Ä–æ—à–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è)
        if target_time < now:
            target_time += timedelta(days=7)
        
        # –ñ–¥–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        wait_seconds = (target_time - now).total_seconds()
        await asyncio.sleep(wait_seconds)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...
        for worksheet in spreadsheet.worksheets():
            if worksheet.title.startswith('family-'):
                continue
            
            user_id = worksheet.title
            try:
                await bot.send_message(
                    chat_id=int(user_id),
                    text="–í—Å–µ —Ç—Ä–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é –∑–∞–ø–∏—Å–∞–Ω—ã? –í—Ä–µ–º—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!",
                    reply_markup=get_main_menu()
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {user_id} - {e}")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def scheduler(bot: Bot):
    asyncio.create_task(send_daily_reminder(bot))
    asyncio.create_task(send_weekly_reminder(bot))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await scheduler(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
