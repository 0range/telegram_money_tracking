import pytest
from aiogram import Dispatcher
from bot import dp, BudgetStates
from aiogram.fsm.storage.memory import MemoryStorage

@pytest.mark.asyncio
async def test_budget_flow():
    dispatcher = Dispatcher(storage=MemoryStorage())
    message = MagicMock()
    message.text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞–º–∏"
    message.from_user = MagicMock(id=789)
    message.answer = AsyncMock()

    # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞
    await dispatcher.feed_update(bot=MagicMock(), update=types.Update(message=message))
    message.answer.assert_called_with("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞–º–∏:", reply_markup=...)

    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    callback = MagicMock()
    callback.data = "üçî –ï–¥–∞ –≤–Ω–µ –¥–æ–º–∞"
    callback.from_user = MagicMock(id=789)
    await dispatcher.feed_update(bot=MagicMock(), update=types.Update(callback_query=callback))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state = dispatcher.fsm.get_context(bot=MagicMock(), user_id=789, chat_id=789)
    assert await state.get_state() == BudgetStates.ENTER_AMOUNT
